- Need some way to handle users disconnecting
- Some way to handle passing off host duties (might should move host processing loop into lobby module)
- Perhaps a results enum member for win-by-default when other players forfeit or disconnect unexpectedly
- I think I'm on track for this, but make sure that modules with a variable number of users are handled appropriately
- Consider implementing type checking in general (low priority for now)
- Add in some kind of min-max constraint checking to option object (at least for ints) so we don't get rejected when loading module
    - alternatively we could revert to default when processing the options if that option's value is out of range
- How to handle loading in users? We could have a blocking load command (problematic, no way to back out, but could be a start)
    - Or, we could spawn children to get the connection, then have a checkConnections command for the host to rope in those socket ids.
- For the purposes of host-passing-off duties as well as to lay the foundation for eventual turn-management in submodules,
    I should add a turn management function to the base module class. Lobby turn management would poll whoever the host is over and over.
    Single-user modules would poll their one user over and over. Multi-user modules would have fancy logic.
    - Also, the lobby could use this to let users select user-specific module options if that happens. However, I expect modules will perform
        their custom user-specific logic in a setup method.
- result handling should be module override-able but there should be a few basic styles like winners/losers & scoreboard
- tag output for bots or humans or general, and clients can choose how to parse it
- Five card draw turns out to require a pretty good bit of work to implement. After finishing it, I should think long & hard on what can/should
    be abstracted out into the engine. (things like stage advancing / command juggling seem natural to abstract)
- some engine way to handle "subturns" for instance, if on my turn I take an action that makes another player perform a reaction, but within the
    context of it still being my turn. Recursion smells like a fit here.
- Games to work with:
    - King of Tokyo
    - Go Fish
    - Rubik's Cube minimal turn searching (this might can be brute forced, but a machine learner doesn't know that).
        - This also works as a indirect pvp sample
- Games to keep in mind/long term:
    - Time stories
    - Texas hold em
    - Dominion
    - Catan
- Something's wrong with the input deal at least on go fish