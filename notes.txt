- Need some way to handle users disconnecting
    - Status: Getting there. The broadcast and read-till-your-turn systems lay the groundwork. Need to figure out what code
        to wrap in try/catch to detect when a socket is closed, broadcast a "Oops abort mission" message to all other users, then
        probably end the server. We could probably just wrap the lobby's turn manager call in the try and grab everything beneath that.
        - Eventually I'd prefer not to throw on user disconnect, but to treat that as a generic forfeit. This would require having a
            generalized concept of forfeit handling though, so it can wait till then since disconnect-handling is an edge use case.
- Some way to handle passing off host duties (might should move host processing loop into lobby module)
    - Status: Done
- I think I'm on track for this, but make sure that modules with a variable number of users are handled appropriately
    - Status: Done
- Consider implementing type checking in general (low priority for now)
- Add in some kind of min-max constraint checking to option object (at least for ints) so we don't get rejected when loading module
    - alternatively we could revert to default when processing the options if that option's value is out of range
    - Status: not yet done, but this is parallel to the command constraint initiative and can probably borrow from that.
        - The easiest way would be to implement fallback to default on illegal option values, then give options a string holding a #ARG
            to describe what we expect
- How to handle loading in users? We could have a blocking load command (problematic, no way to back out, but could be a start)
    - Or, we could spawn children to get the connection, then have a checkConnections command for the host to rope in those socket ids.
    - Status: The blocking load command is done, however this is not necessarily the final implementation.
- For the purposes of host-passing-off duties as well as to lay the foundation for eventual turn-management in submodules,
    I should add a turn management function to the base module class. Lobby turn management would poll whoever the host is over and over.
    Single-user modules would poll their one user over and over. Multi-user modules would have fancy logic.
    - Also, the lobby could use this to let users select user-specific module options if that happens. However, I expect modules will perform
        their custom user-specific logic in a setup method.
- result handling should be module override-able but there should be a few basic styles like winners/losers & scoreboard
- tag output for bots or humans or general, and clients can choose how to parse it
- Five card draw turns out to require a pretty good bit of work to implement. After finishing it, I should think long & hard on what can/should
    be abstracted out into the engine. (things like stage advancing / command juggling seem natural to abstract)
- some engine way to handle "subturns" for instance, if on my turn I take an action that makes another player perform a reaction, but within the
    context of it still being my turn. Recursion smells like a fit here.
- Games to work with:
    - King of Tokyo
    - Go Fish
    - Rubik's Cube minimal turn searching (this might can be brute forced, but a machine learner doesn't know that).
    - Prisoner's Dilemma (Only works in a round robin format)
        - This also works as a indirect pvp sample
- Games to keep in mind/long term:
    - Time stories
    - Texas hold em
    - Dominion
    - Catan
- Something's wrong with the input deal at least on go fish. I might be using an old client? Make sure the
    read-&-print-until-your-turn loop is working.
- Formalize the #RANGE and #COLLECTION deals. Think about reworking the command class to handle/output these better. Think about using them
    in game options (For instance in lieu of the current numPlayers system). Consider making a range class and a collection class (and
        maybe a few others dealing with strings, decimals, etc.)
- Come up with a pleasant way to abstract out building up range and collection strings.
- Think about how we want to output #RANGE, #COLLECTION, etc. Should they fall under a parent # like #ARG or something? Like what about
    #ARG.RANGE(1,925) or #ARG.COLLECTION(1, 3, 5, 6, 7). That way, we can add in new arg types and client code will fail more gracefully on it.
- Mull over this #FAMILY concept. See if we can put everything in it. For instance, #MSG.BROADCAST, #MSG.INPUTREADY, etc. this will let client
    code set up smarter rules about # output. It can even file complaints to the user about unknown #FAMILY.MEMBERS
- Consider a standardized myInfo command that shows you all your stuff as well as public knowledge for each enemy.
- Come up with a less terrible turn management system. Stages should be automatic. Stages should have a collection of commands.
    - These commands are also dependent on current stage state. Stage can be a high-level class, and updating its state can happen early in
        the turn manager. Try to get some kind of auto-detection of when to move on from a turn or stage etc but don't sweat that one too hard
        right away.
- Low priority, but think about making a file for common elements like cards, boards/pieces, etc. Really generic board/piece code which makes
    everything from candyland to chess easier would be delightful, but requires care.
- Variable isolation/typing for bots. Gotta think through how to implement this. Can probably be done on a game-by-game basis.
- Block users from having the same name.
- Block users from having whitespace in name.
- Go fish: fix books, add victory